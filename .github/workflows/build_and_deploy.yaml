name: Build and Deploy Quarto Book

# This workflow builds the Quarto book and deploys it to GitHub Pages.
# The "build" job is triggered by pull requests, pushes to the main branch,
# releases (tags starting with "v", e.g., v2025.08), or manually.
#
# If the trigger is a release tag, the book is rendered with two profiles,
# with and without answers, and each profile is uploaded as an artifact.
# For other triggers, the book is rendered with answers only.
#
# The "deploy" job is only triggered by pushes to main and releases.
# It copies the book artifact(s) to an appropriate folder in the gh-pages branch,
# e.g., v2025.08 / v2025.08-answers for a release or dev for pushes to main.
# It also copies the most recent release version without answers to the
# "latest/" folder where the home page is redirected to.

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
  workflow_dispatch:

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: neuroinformatics-unit/actions/lint@v2

  build:
    name: Build Quarto book
    runs-on: ubuntu-latest
    defaults:
      run:
        # use a login shell to ensure conda is activated
        # and the correct python is used by quarto
        shell: bash -el {0}
    needs: linting
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine build context
        id: context
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "is_release=true"  >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "version=dev" >> $GITHUB_OUTPUT
          fi

      - name: Cache movement sample data
        uses: actions/cache@v4
        with:
          path: |
            ~/.movement/data/*
          key: cached-sample-data
          restore-keys: cached-sample-data

      - name: Cache Smart-Kages data
        id: cache-smartkages
        uses: actions/cache@v4
        with:
          path: |
            ~/.movement/Smart-Kages
          key: smart-kages-data-v4

      - name: Cache CalMS21 data
        id: cache-calms21
        uses: actions/cache@v4
        with:
          path: |
            ~/.movement/CalMS21
          key: calms21-data-v3

      - name: Download Smart-Kages data from Dropbox
        if: steps.cache-smartkages.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.movement
          curl -L "https://www.dropbox.com/scl/fi/iddcyw04kmx3oxjjw6b8o/Smart-Kages.zip?rlkey=45ckr4xg5oc2vl3p1jicg3wlz&st=j7nf5yzr&dl=1" -o ~/.movement/Smart-Kages.zip
          unzip ~/.movement/Smart-Kages.zip -d ~/.movement
          rm ~/.movement/Smart-Kages.zip
          ls -lR ~/.movement/Smart-Kages

      - name: Download CalMS21 data from Dropbox
        if: steps.cache-calms21.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.movement
          curl -L "https://www.dropbox.com/scl/fo/mgko4c1lna0ajg5vg1vty/ABcthxRAFULhlXMzzlGDVJc?rlkey=bmf17y4ylhllqtzb31i780x46&st=xclohrlx&dl=1" -o ~/.movement/CalMS21.zip
          unzip ~/.movement/CalMS21.zip -x / -d ~/.movement/CalMS21
          rm ~/.movement/CalMS21.zip
          ls -lR ~/.movement/CalMS21

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment-dev.yaml
          activate-environment: animals-in-motion-env
          channel-priority: strict
          channels: conda-forge

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Render book with answers profile
        env:
          # Make sure quarto uses the activated conda environment
          QUARTO_PYTHON: ${{ env.CONDA }}/envs/animals-in-motion-env/bin/python
        run: |
          quarto render book --execute --profile answers --output-dir _book-answers

      - name: Upload rendered answers profile book
        uses: actions/upload-artifact@v4
        with:
          name: book-${{ steps.context.outputs.version }}-answers
          path: book/_book-answers

      # The following steps are only executed for release tags
      - name: Render book with default profile (no answers)
        if: steps.context.outputs.is_release == 'true'
        env:
          QUARTO_PYTHON: ${{ env.CONDA }}/envs/animals-in-motion-env/bin/python
        run: |
          quarto render book --execute --profile default --output-dir _book

      - name: Upload rendered book with default profile (no answers)
        if: steps.context.outputs.is_release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: book-${{ steps.context.outputs.version }}
          path: book/_book

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))) || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      # If the ref is a tag, destination_dir has a release version number.
      # Otherwise, destination_dir is called "dev"
      - name: Determine deploy context
        id: context
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "destination_dir=${VERSION}" >> $GITHUB_OUTPUT
            echo "destination_dir_answers=${VERSION}-answers" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "destination_dir=dev" >> $GITHUB_OUTPUT
            echo "destination_dir_answers=dev" >> $GITHUB_OUTPUT
            echo "version=dev" >> $GITHUB_OUTPUT
          fi

      - name: Download book with answers profile artifact
        uses: actions/download-artifact@v5
        with:
          name: book-${{ steps.context.outputs.version }}-answers
          path: answers-artifact

      - name: Deploy answers version
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: answers-artifact
          destination_dir: ${{ steps.context.outputs.destination_dir_answers }}

      # Default (no answers) version is only deployed for release tags
      - name: Download book with default profile artifact
        if: steps.context.outputs.is_release == 'true'
        uses: actions/download-artifact@v5
        with:
          name: book-${{ steps.context.outputs.version }}
          path: default-artifact

      - name: Deploy default version
        if: steps.context.outputs.is_release == 'true'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: default-artifact
          destination_dir: ${{ steps.context.outputs.destination_dir }}

      # Clone gh-pages branch
      - name: Clone gh-pages branch
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git clone --depth 1 --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages

      # Check if any release folders exist yet
      - name: Check if any releases exist
        id: gh-pages-meta
        run: |
          if ls -d gh-pages/v* 2>/dev/null | grep -q .; then
            echo "releases_exist=true" >> $GITHUB_OUTPUT
          else
            echo "releases_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Ensure CNAME file is present in gh-pages root
        run: echo "animals-in-motion.neuroinformatics.dev" > gh-pages/CNAME

      # Copy release folder without answers to "latest"
      # If no releases exist, "dev" is copied to "latest"
      # The gh-pages branch root already contains an index.html file that redirects to latest/
      - name: Copy to latest
        if: |
          steps.context.outputs.is_release == 'true' ||
          (steps.context.outputs.is_release == 'false' && steps.gh-pages-meta.outputs.releases_exist == 'false')
        run: |

          cd gh-pages
          echo "Copying ${{ steps.context.outputs.destination_dir }} to latest/"
          rm -rf latest
          cp -r ${{ steps.context.outputs.destination_dir }} latest

          git add latest index.html CNAME
          git commit -m "Update latest/ to ${{ steps.context.outputs.destination_dir }}" || echo "No changes to commit"
          git push
